{"ast":null,"code":"var _jsxFileName = \"/Users/nicolaromani/Desktop/projects/frontend-assignment/packages/client/src/components/presentational/PokemonList.tsx\";\nimport React from \"react\";\nimport { List } from \"antd\";\nimport PokemonListItem from \"./PokemonListItem\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nconst ALL_POKEMONS = gql`\n  query Pokemons($name: String, $after: ID, $limit: Int) {\n    pokemons(q: $name, after: $after, limit: $limit) {\n      edges {\n        node {\n          id\n          name\n          types\n          classification\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n`;\nconst POKEMONS_BY_TYPE = gql`\n  query PokemonsByType($name: String) {\n    pokemons(edges: { node: { name: $name } }) {\n      edges {\n        node {\n          id\n          name\n          types\n          classification\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n`;\nexport default (props => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(ALL_POKEMONS, {\n    variables: {\n      name: props.name,\n      type: props.type,\n      limit: props.limit\n    },\n    skip: !!props.type,\n    fetchPolicy: \"cache-and-network\"\n  });\n  const {\n    loadingTypes,\n    errorTypes,\n    dataTypes\n  } = useQuery(POKEMONS_BY_TYPE, {\n    variables: {\n      type: props.type\n    },\n    skip: !props.type,\n    fetchPolicy: \"cache-and-network\"\n  });\n\n  if (error || errorTypes) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 12\n      }\n    }, \"Sorry, something broke off. Reload the app to try again!\");\n  }\n\n  if (data) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, data && data.pokemons.edges.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"noPokemons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }, \"There are no pokemons matching your preferences! \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 62\n      }\n    }), \"Please try another configuration.\") : /*#__PURE__*/React.createElement(List, {\n      loading: !!loading,\n      dataSource: data.pokemons.edges,\n      pagination: {\n        position: \"top\",\n        pageSize: props.pageQuantity\n      },\n      renderItem: item => /*#__PURE__*/React.createElement(PokemonListItem, {\n        node: item.node,\n        key: Number(item.node.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }));\n  }\n});","map":{"version":3,"sources":["/Users/nicolaromani/Desktop/projects/frontend-assignment/packages/client/src/components/presentational/PokemonList.tsx"],"names":["React","List","PokemonListItem","useQuery","gql","ALL_POKEMONS","POKEMONS_BY_TYPE","props","loading","error","data","variables","name","type","limit","skip","fetchPolicy","loadingTypes","errorTypes","dataTypes","pokemons","edges","length","position","pageSize","pageQuantity","item","node","Number","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,MAArB;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,YAAY,GAAGD,GAAI;;;;;;;;;;;;;;;;;CAAzB;AAmBA,MAAME,gBAAgB,GAAGF,GAAI;;;;;;;;;;;;;;;;;CAA7B;AAmBA,gBAAgBG,KAAD,IAKT;AACJ,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACE,YAAD,EAAe;AACtDM,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAEL,KAAK,CAACK,IADH;AAETC,MAAAA,IAAI,EAAEN,KAAK,CAACM,IAFH;AAGTC,MAAAA,KAAK,EAAEP,KAAK,CAACO;AAHJ,KAD2C;AAMtDC,IAAAA,IAAI,EAAE,CAAC,CAACR,KAAK,CAACM,IANwC;AAOtDG,IAAAA,WAAW,EAAE;AAPyC,GAAf,CAAzC;AASA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,UAAhB;AAA4BC,IAAAA;AAA5B,MAA0ChB,QAAQ,CAACG,gBAAD,EAAmB;AACzEK,IAAAA,SAAS,EAAE;AACTE,MAAAA,IAAI,EAAEN,KAAK,CAACM;AADH,KAD8D;AAIzEE,IAAAA,IAAI,EAAE,CAACR,KAAK,CAACM,IAJ4D;AAKzEG,IAAAA,WAAW,EAAE;AAL4D,GAAnB,CAAxD;;AAOA,MAAIP,KAAK,IAAIS,UAAb,EAAyB;AACvB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEAAP;AACD;;AACD,MAAIR,IAAJ,EAAU;AACR,wBACE,0CACGA,IAAI,IAAIA,IAAI,CAACU,QAAL,CAAcC,KAAd,CAAoBC,MAApB,KAA+B,CAAvC,gBACC;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yEACmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADnD,sCADD,gBAMC,oBAAC,IAAD;AACE,MAAA,OAAO,EAAE,CAAC,CAACd,OADb;AAEE,MAAA,UAAU,EAAEE,IAAI,CAACU,QAAL,CAAcC,KAF5B;AAGE,MAAA,UAAU,EAAE;AAAEE,QAAAA,QAAQ,EAAE,KAAZ;AAAmBC,QAAAA,QAAQ,EAAEjB,KAAK,CAACkB;AAAnC,OAHd;AAIE,MAAA,UAAU,EAAGC,IAAD,iBACV,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEA,IAAI,CAACC,IAA5B;AAAkC,QAAA,GAAG,EAAEC,MAAM,CAACF,IAAI,CAACC,IAAL,CAAUE,EAAX,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CADF;AAkBD;AACF,CA7CD","sourcesContent":["import React from \"react\";\nimport { List } from \"antd\";\nimport { PokemonNode, PokemonItem } from \"../../typescript/interfaces\";\nimport PokemonListItem from \"./PokemonListItem\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\n\nconst ALL_POKEMONS = gql`\n  query Pokemons($name: String, $after: ID, $limit: Int) {\n    pokemons(q: $name, after: $after, limit: $limit) {\n      edges {\n        node {\n          id\n          name\n          types\n          classification\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n`;\n\nconst POKEMONS_BY_TYPE = gql`\n  query PokemonsByType($name: String) {\n    pokemons(edges: { node: { name: $name } }) {\n      edges {\n        node {\n          id\n          name\n          types\n          classification\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n`;\n\nexport default (props: {\n  name: string;\n  type: string;\n  limit: number;\n  pageQuantity: number;\n}) => {\n  const { loading, error, data } = useQuery(ALL_POKEMONS, {\n    variables: {\n      name: props.name,\n      type: props.type,\n      limit: props.limit,\n    },\n    skip: !!props.type,\n    fetchPolicy: \"cache-and-network\",\n  });\n  const { loadingTypes, errorTypes, dataTypes } = useQuery(POKEMONS_BY_TYPE, {\n    variables: {\n      type: props.type,\n    },\n    skip: !props.type,\n    fetchPolicy: \"cache-and-network\",\n  });\n  if (error || errorTypes) {\n    return <div>Sorry, something broke off. Reload the app to try again!</div>;\n  }\n  if (data) {\n    return (\n      <>\n        {data && data.pokemons.edges.length === 0 ? (\n          <div className=\"noPokemons\">\n            There are no pokemons matching your preferences! <br />\n            Please try another configuration.\n          </div>\n        ) : (\n          <List\n            loading={!!loading}\n            dataSource={data.pokemons.edges}\n            pagination={{ position: \"top\", pageSize: props.pageQuantity }}\n            renderItem={(item: PokemonNode<PokemonItem>) => (\n              <PokemonListItem node={item.node} key={Number(item.node.id)} />\n            )}></List>\n        )}\n      </>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}