{"ast":null,"code":"var _jsxFileName = \"/Users/nicolaromani/Desktop/projects/frontend-assignment/packages/client/src/components/presentational/PokemonList.tsx\";\nimport React from \"react\";\nimport { List, Button } from \"antd\";\nimport PokemonListItem from \"./PokemonListItem\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { ALL_POKEMONS, POKEMONS_BY_TYPE } from \"../../graphql/queries\";\nexport default (props => {\n  const {\n    loading,\n    error,\n    data: genericData,\n    fetchMore: genericFetchMore\n  } = useQuery(ALL_POKEMONS, {\n    variables: {\n      name: props.name,\n      limit: props.limit\n    },\n    skip: !!props.type\n  });\n  const {\n    loading: loadingTypes,\n    error: errorTypes,\n    data: typeData,\n    fetchMore: typeFetchMore\n  } = useQuery(POKEMONS_BY_TYPE, {\n    variables: {\n      type: props.type,\n      limit: props.limit\n    },\n    skip: !props.type,\n    fetchPolicy: \"no-cache\"\n  });\n\n  if (error || errorTypes) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 12\n      }\n    }, \"Sorry, something broke off. Reload the app to try again!\");\n  }\n\n  if (genericData) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, genericData && genericData.pokemons.edges.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"noPokemons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }, \"There are no pokemons matching your preferences! \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 62\n      }\n    }), \"Please try another configuration.\") : /*#__PURE__*/React.createElement(List, {\n      dataSource: genericData.pokemons.edges,\n      loading: !!loading,\n      loadMore: genericData.pokemons.pageInfo.hasNextPage ? /*#__PURE__*/React.createElement(Button, {\n        style: {\n          marginBottom: \"20px\"\n        },\n        onClick: () => genericFetchMore({\n          variables: {\n            after: genericData.pokemons.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, {\n            fetchMoreResult\n          }) => {\n            const newEdges = fetchMoreResult.pokemons.edges;\n            const pageInfo = fetchMoreResult.pokemons.pageInfo;\n            debugger;\n            return newEdges.length ? {\n              // Put the new pokemons at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              genericData: {\n                pokemons: {\n                  __typename: genericData.pokemons.__typename,\n                  edges: [...genericData.pokemons.edges, ...newEdges],\n                  pageInfo\n                }\n              }\n            } : previousResult;\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }\n      }, \"Load More\") : null,\n      pagination: {\n        position: \"top\",\n        pageSize: props.pageQuantity\n      },\n      renderItem: item => /*#__PURE__*/React.createElement(PokemonListItem, {\n        node: item.node,\n        key: Number(item.node.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }));\n  } else if (typeData) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, typeData && typeData.pokemonsByType.edges.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"noPokemons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }, \"There are no pokemons matching your preferences! \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 62\n      }\n    }), \"Please try another configuration.\") : /*#__PURE__*/React.createElement(List, {\n      loading: !!loadingTypes,\n      dataSource: typeData.pokemonsByType.edges,\n      loadMore: typeData.pokemonsByType.pageInfo.hasNextPage ? /*#__PURE__*/React.createElement(Button, {\n        style: {\n          marginBottom: \"20px\"\n        },\n        onClick: () => typeFetchMore({\n          variables: {\n            after: typeData.pokemonsByType.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, {\n            fetchMoreResult\n          }) => {\n            const newEdges = fetchMoreResult.pokemonsByType.edges;\n            const pageInfo = fetchMoreResult.pokemonsByType.pageInfo;\n            debugger;\n            return newEdges.length ? {\n              // Put the new pokemons at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              genericData: {\n                pokemons: {\n                  __typename: typeData.pokemonsByType.__typename,\n                  edges: [...typeData.pokemonsByType.edges, ...newEdges],\n                  pageInfo\n                }\n              }\n            } : previousResult;\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }\n      }, \"Load More\") : null,\n      pagination: {\n        position: \"top\",\n        pageSize: props.pageQuantity\n      },\n      renderItem: item => /*#__PURE__*/React.createElement(PokemonListItem, {\n        node: item.node,\n        key: Number(item.node.id),\n        image: images,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"noPokemons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }\n    }, \"There are no pokemons matching your preferences! \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 58\n      }\n    }), \"Please try another configuration.\");\n  }\n});","map":{"version":3,"sources":["/Users/nicolaromani/Desktop/projects/frontend-assignment/packages/client/src/components/presentational/PokemonList.tsx"],"names":["React","List","Button","PokemonListItem","useQuery","ALL_POKEMONS","POKEMONS_BY_TYPE","props","loading","error","data","genericData","fetchMore","genericFetchMore","variables","name","limit","skip","type","loadingTypes","errorTypes","typeData","typeFetchMore","fetchPolicy","pokemons","edges","length","pageInfo","hasNextPage","marginBottom","after","endCursor","updateQuery","previousResult","fetchMoreResult","newEdges","__typename","position","pageSize","pageQuantity","item","node","Number","id","pokemonsByType","images"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { List, Button } from \"antd\";\nimport { PokemonNode, PokemonItem } from \"../../typescript/interfaces\";\nimport PokemonListItem from \"./PokemonListItem\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { ALL_POKEMONS, POKEMONS_BY_TYPE } from \"../../graphql/queries\";\n\nexport default (props: {\n  name: string;\n  type: string;\n  limit: number;\n  pageQuantity: number;\n  images: boolean;\n}) => {\n  const {\n    loading,\n    error,\n    data: genericData,\n    fetchMore: genericFetchMore,\n  } = useQuery(ALL_POKEMONS, {\n    variables: {\n      name: props.name,\n      limit: props.limit,\n    },\n    skip: !!props.type,\n  });\n  const {\n    loading: loadingTypes,\n    error: errorTypes,\n    data: typeData,\n    fetchMore: typeFetchMore,\n  } = useQuery(POKEMONS_BY_TYPE, {\n    variables: {\n      type: props.type,\n      limit: props.limit,\n    },\n    skip: !props.type,\n    fetchPolicy: \"no-cache\",\n  });\n  if (error || errorTypes) {\n    return <div>Sorry, something broke off. Reload the app to try again!</div>;\n  }\n  if (genericData) {\n    return (\n      <>\n        {genericData && genericData.pokemons.edges.length === 0 ? (\n          <div className=\"noPokemons\">\n            There are no pokemons matching your preferences! <br />\n            Please try another configuration.\n          </div>\n        ) : (\n          <List\n            dataSource={genericData.pokemons.edges}\n            loading={!!loading}\n            loadMore={\n              genericData.pokemons.pageInfo.hasNextPage ? (\n                <Button\n                  style={{ marginBottom: \"20px\" }}\n                  onClick={() =>\n                    genericFetchMore({\n                      variables: {\n                        after: genericData.pokemons.pageInfo.endCursor,\n                      },\n                      updateQuery: (\n                        previousResult,\n                        { fetchMoreResult }: { fetchMoreResult?: any }\n                      ) => {\n                        const newEdges = fetchMoreResult.pokemons.edges;\n                        const pageInfo = fetchMoreResult.pokemons.pageInfo;\n                        debugger;\n                        return newEdges.length\n                          ? {\n                              // Put the new pokemons at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              genericData: {\n                                pokemons: {\n                                  __typename: genericData.pokemons.__typename,\n                                  edges: [\n                                    ...genericData.pokemons.edges,\n                                    ...newEdges,\n                                  ],\n                                  pageInfo,\n                                },\n                              },\n                            }\n                          : previousResult;\n                      },\n                    })\n                  }>\n                  Load More\n                </Button>\n              ) : null\n            }\n            pagination={{ position: \"top\", pageSize: props.pageQuantity }}\n            renderItem={(item: PokemonNode<PokemonItem>) => (\n              <PokemonListItem node={item.node} key={Number(item.node.id)} />\n            )}></List>\n        )}\n      </>\n    );\n  } else if (typeData) {\n    return (\n      <>\n        {typeData && typeData.pokemonsByType.edges.length === 0 ? (\n          <div className=\"noPokemons\">\n            There are no pokemons matching your preferences! <br />\n            Please try another configuration.\n          </div>\n        ) : (\n          <List\n            loading={!!loadingTypes}\n            dataSource={typeData.pokemonsByType.edges}\n            loadMore={\n              typeData.pokemonsByType.pageInfo.hasNextPage ? (\n                <Button\n                  style={{ marginBottom: \"20px\" }}\n                  onClick={() =>\n                    typeFetchMore({\n                      variables: {\n                        after: typeData.pokemonsByType.pageInfo.endCursor,\n                      },\n                      updateQuery: (\n                        previousResult,\n                        { fetchMoreResult }: { fetchMoreResult?: any }\n                      ) => {\n                        const newEdges = fetchMoreResult.pokemonsByType.edges;\n                        const pageInfo =\n                          fetchMoreResult.pokemonsByType.pageInfo;\n                        debugger;\n                        return newEdges.length\n                          ? {\n                              // Put the new pokemons at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              genericData: {\n                                pokemons: {\n                                  __typename:\n                                    typeData.pokemonsByType.__typename,\n                                  edges: [\n                                    ...typeData.pokemonsByType.edges,\n                                    ...newEdges,\n                                  ],\n                                  pageInfo,\n                                },\n                              },\n                            }\n                          : previousResult;\n                      },\n                    })\n                  }>\n                  Load More\n                </Button>\n              ) : null\n            }\n            pagination={{ position: \"top\", pageSize: props.pageQuantity }}\n            renderItem={(item: PokemonNode<PokemonItem>) => (\n              <PokemonListItem\n                node={item.node}\n                key={Number(item.node.id)}\n                image={images}\n              />\n            )}></List>\n        )}\n      </>\n    );\n  } else {\n    return (\n      <div className=\"noPokemons\">\n        There are no pokemons matching your preferences! <br />\n        Please try another configuration.\n      </div>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}