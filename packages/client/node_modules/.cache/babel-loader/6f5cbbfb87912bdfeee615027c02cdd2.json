{"ast":null,"code":"var _jsxFileName = \"/Users/nicolaromani/Desktop/projects/frontend-assignment/packages/client/src/components/presentational/PokemonList.tsx\";\nimport React from \"react\";\nimport { List } from \"antd\";\nimport PokemonListItem from \"./PokemonListItem\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nconst ALL_POKEMONS = gql`\n  query Pokemons($name: String, $after: ID, $limit: Int) {\n    pokemons(q: $name, after: $after, limit: $limit) {\n      edges {\n        node {\n          id\n          name\n          types\n          classification\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n`;\nconst POKEMONS_BY_TYPE = gql`\n  query PokemonsByType($type: String, $after: ID, $limit: Int) {\n    pokemonsByType(type: $type, after: $after, limit: $limit) {\n      edges {\n        node {\n          id\n          name\n          types\n          classification\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n`;\nexport default (props => {\n  const {\n    loading,\n    error,\n    data: genericData\n  } = useQuery(ALL_POKEMONS, {\n    variables: {\n      name: props.name,\n      limit: props.limit\n    },\n    skip: false,\n    fetchPolicy: \"cache-and-network\"\n  });\n  const {\n    loading: loadingTypes,\n    error: errorTypes,\n    data: typeData\n  } = useQuery(POKEMONS_BY_TYPE, {\n    variables: {\n      type: props.type,\n      limit: props.limit\n    },\n    skip: true,\n    fetchPolicy: \"cache-and-network\"\n  });\n\n  if (error || errorTypes) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 12\n      }\n    }, \"Sorry, something broke off. Reload the app to try again!\");\n  }\n\n  if (genericData) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, genericData && genericData.pokemons.edges.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"noPokemons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }, \"There are no pokemons matching your preferences! \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 62\n      }\n    }), \"Please try another configuration.\") : /*#__PURE__*/React.createElement(List, {\n      loading: !!loading,\n      dataSource: genericData.pokemons.edges,\n      pagination: {\n        position: \"top\",\n        pageSize: props.pageQuantity\n      },\n      renderItem: item => /*#__PURE__*/React.createElement(PokemonListItem, {\n        node: item.node,\n        key: Number(item.node.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }));\n  } else if (typeData) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, typeData && typeData.pokemons.edges.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"noPokemons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, \"There are no pokemons matching your preferences! \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 62\n      }\n    }), \"Please try another configuration.\") : /*#__PURE__*/React.createElement(List, {\n      loading: !!loadingTypes,\n      dataSource: typeData.pokemons.edges,\n      pagination: {\n        position: \"top\",\n        pageSize: props.pageQuantity\n      },\n      renderItem: item => /*#__PURE__*/React.createElement(PokemonListItem, {\n        node: item.node,\n        key: Number(item.node.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"noPokemons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, \"There are no pokemons matching your preferences! \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 58\n      }\n    }), \"Please try another configuration.\");\n  }\n});","map":{"version":3,"sources":["/Users/nicolaromani/Desktop/projects/frontend-assignment/packages/client/src/components/presentational/PokemonList.tsx"],"names":["React","List","PokemonListItem","useQuery","gql","ALL_POKEMONS","POKEMONS_BY_TYPE","props","loading","error","data","genericData","variables","name","limit","skip","fetchPolicy","loadingTypes","errorTypes","typeData","type","pokemons","edges","length","position","pageSize","pageQuantity","item","node","Number","id"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { List } from \"antd\";\nimport { PokemonNode, PokemonItem } from \"../../typescript/interfaces\";\nimport PokemonListItem from \"./PokemonListItem\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\n\nconst ALL_POKEMONS = gql`\n  query Pokemons($name: String, $after: ID, $limit: Int) {\n    pokemons(q: $name, after: $after, limit: $limit) {\n      edges {\n        node {\n          id\n          name\n          types\n          classification\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n`;\n\nconst POKEMONS_BY_TYPE = gql`\n  query PokemonsByType($type: String, $after: ID, $limit: Int) {\n    pokemonsByType(type: $type, after: $after, limit: $limit) {\n      edges {\n        node {\n          id\n          name\n          types\n          classification\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n`;\n\nexport default (props: {\n  name: string;\n  type: string;\n  limit: number;\n  pageQuantity: number;\n}) => {\n  const { loading, error, data: genericData } = useQuery(ALL_POKEMONS, {\n    variables: {\n      name: props.name,\n      limit: props.limit,\n    },\n    skip: false,\n    fetchPolicy: \"cache-and-network\",\n  });\n  const { loading: loadingTypes, error: errorTypes, data: typeData } = useQuery(\n    POKEMONS_BY_TYPE,\n    {\n      variables: {\n        type: props.type,\n        limit: props.limit,\n      },\n      skip: true,\n      fetchPolicy: \"cache-and-network\",\n    }\n  );\n  if (error || errorTypes) {\n    return <div>Sorry, something broke off. Reload the app to try again!</div>;\n  }\n  if (genericData) {\n    return (\n      <>\n        {genericData && genericData.pokemons.edges.length === 0 ? (\n          <div className=\"noPokemons\">\n            There are no pokemons matching your preferences! <br />\n            Please try another configuration.\n          </div>\n        ) : (\n          <List\n            loading={!!loading}\n            dataSource={genericData.pokemons.edges}\n            pagination={{ position: \"top\", pageSize: props.pageQuantity }}\n            renderItem={(item: PokemonNode<PokemonItem>) => (\n              <PokemonListItem node={item.node} key={Number(item.node.id)} />\n            )}></List>\n        )}\n      </>\n    );\n  } else if (typeData) {\n    return (\n      <>\n        {typeData && typeData.pokemons.edges.length === 0 ? (\n          <div className=\"noPokemons\">\n            There are no pokemons matching your preferences! <br />\n            Please try another configuration.\n          </div>\n        ) : (\n          <List\n            loading={!!loadingTypes}\n            dataSource={typeData.pokemons.edges}\n            pagination={{ position: \"top\", pageSize: props.pageQuantity }}\n            renderItem={(item: PokemonNode<PokemonItem>) => (\n              <PokemonListItem node={item.node} key={Number(item.node.id)} />\n            )}></List>\n        )}\n      </>\n    );\n  } else {\n    return (\n      <div className=\"noPokemons\">\n        There are no pokemons matching your preferences! <br />\n        Please try another configuration.\n      </div>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}