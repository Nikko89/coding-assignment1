{"ast":null,"code":"var _jsxFileName = \"/Users/nicolaromani/Desktop/projects/frontend-assignment/packages/client/src/components/presentational/PokemonList.tsx\";\nimport React from \"react\";\nimport { List } from \"antd\";\nimport PokemonListItem from \"./PokemonListItem\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { ALL_POKEMONS, POKEMONS_BY_TYPE } from \"../../graphql/queries\";\nexport default (props => {\n  const {\n    loading,\n    error,\n    data: genericData,\n    fetchMore: genericFetchMore\n  } = useQuery(ALL_POKEMONS, {\n    variables: {\n      name: props.name,\n      limit: props.limit\n    },\n    skip: !!props.type\n  });\n  const {\n    loading: loadingTypes,\n    error: errorTypes,\n    data: typeData,\n    fetchMore: typeFetchMore\n  } = useQuery(POKEMONS_BY_TYPE, {\n    variables: {\n      type: props.type,\n      limit: props.limit\n    },\n    skip: !props.type,\n    fetchPolicy: \"no-cache\"\n  });\n\n  if (error || errorTypes) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 12\n      }\n    }, \"Sorry, something broke off. Reload the app to try again!\");\n  }\n\n  if (genericData) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, genericData && genericData.pokemons.edges.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"noPokemons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    }, \"There are no pokemons matching your preferences! \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 62\n      }\n    }), \"Please try another configuration.\") : /*#__PURE__*/React.createElement(List, {\n      loading: !!loading,\n      loadMore: genericData.pokemons.pageInfo.hasNextPage ? /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => genericFetchMore({\n          variables: {\n            after: genericData.pokemons.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, {\n            fetchMoreResult\n          }) => {\n            const newEdges = fetchMoreResult.pokemons.edges.map(el => {\n              return el.node;\n            });\n            const pageInfo = fetchMoreResult.pokemons.pageInfo;\n            debugger;\n            return newEdges.length ? {\n              // Put the new comments at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              genericData: {\n                pokemons: {\n                  edges: [...previousResult.pokemons.edges, ...newEdges],\n                  pageInfo\n                }\n              }\n            } : previousResult;\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }\n      }, \"cliccami\") : null,\n      dataSource: genericData.pokemons.edges,\n      pagination: {\n        position: \"top\",\n        pageSize: props.pageQuantity\n      },\n      renderItem: item => /*#__PURE__*/React.createElement(PokemonListItem, {\n        node: item.node,\n        key: Number(item.node.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }));\n  } else if (typeData) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, typeData && typeData.pokemonsByType.edges.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"noPokemons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, \"There are no pokemons matching your preferences! \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 62\n      }\n    }), \"Please try another configuration.\") : /*#__PURE__*/React.createElement(List, {\n      loading: !!loadingTypes,\n      dataSource: typeData.pokemonsByType.edges,\n      loadMore: \"ciao\",\n      pagination: {\n        position: \"top\",\n        pageSize: props.pageQuantity\n      },\n      renderItem: item => /*#__PURE__*/React.createElement(PokemonListItem, {\n        node: item.node,\n        key: Number(item.node.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"noPokemons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }\n    }, \"There are no pokemons matching your preferences! \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 58\n      }\n    }), \"Please try another configuration.\");\n  }\n});","map":{"version":3,"sources":["/Users/nicolaromani/Desktop/projects/frontend-assignment/packages/client/src/components/presentational/PokemonList.tsx"],"names":["React","List","PokemonListItem","useQuery","ALL_POKEMONS","POKEMONS_BY_TYPE","props","loading","error","data","genericData","fetchMore","genericFetchMore","variables","name","limit","skip","type","loadingTypes","errorTypes","typeData","typeFetchMore","fetchPolicy","pokemons","edges","length","pageInfo","hasNextPage","after","endCursor","updateQuery","previousResult","fetchMoreResult","newEdges","map","el","node","position","pageSize","pageQuantity","item","Number","id","pokemonsByType"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { List } from \"antd\";\nimport { PokemonNode, PokemonItem } from \"../../typescript/interfaces\";\nimport PokemonListItem from \"./PokemonListItem\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { ALL_POKEMONS, POKEMONS_BY_TYPE } from \"../../graphql/queries\";\n\nexport default (props: {\n  name: string;\n  type: string;\n  limit: number;\n  pageQuantity: number;\n}) => {\n  const {\n    loading,\n    error,\n    data: genericData,\n    fetchMore: genericFetchMore,\n  } = useQuery(ALL_POKEMONS, {\n    variables: {\n      name: props.name,\n      limit: props.limit,\n    },\n    skip: !!props.type,\n  });\n  const {\n    loading: loadingTypes,\n    error: errorTypes,\n    data: typeData,\n    fetchMore: typeFetchMore,\n  } = useQuery(POKEMONS_BY_TYPE, {\n    variables: {\n      type: props.type,\n      limit: props.limit,\n    },\n    skip: !props.type,\n    fetchPolicy: \"no-cache\",\n  });\n  if (error || errorTypes) {\n    return <div>Sorry, something broke off. Reload the app to try again!</div>;\n  }\n  if (genericData) {\n    return (\n      <>\n        {genericData && genericData.pokemons.edges.length === 0 ? (\n          <div className=\"noPokemons\">\n            There are no pokemons matching your preferences! <br />\n            Please try another configuration.\n          </div>\n        ) : (\n          <List\n            loading={!!loading}\n            loadMore={\n              genericData.pokemons.pageInfo.hasNextPage ? (\n                <button\n                  onClick={() =>\n                    genericFetchMore({\n                      variables: {\n                        after: genericData.pokemons.pageInfo.endCursor,\n                      },\n                      updateQuery: (\n                        previousResult,\n                        { fetchMoreResult }: { fetchMoreResult?: any }\n                      ) => {\n                        const newEdges = fetchMoreResult.pokemons.edges.map(\n                          (el: any) => {\n                            return el.node;\n                          }\n                        );\n                        const pageInfo = fetchMoreResult.pokemons.pageInfo;\n                        debugger;\n                        return newEdges.length\n                          ? {\n                              // Put the new comments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              genericData: {\n                                pokemons: {\n                                  edges: [\n                                    ...previousResult.pokemons.edges,\n                                    ...newEdges,\n                                  ],\n                                  pageInfo,\n                                },\n                              },\n                            }\n                          : previousResult;\n                      },\n                    })\n                  }>\n                  cliccami\n                </button>\n              ) : null\n            }\n            dataSource={genericData.pokemons.edges}\n            pagination={{ position: \"top\", pageSize: props.pageQuantity }}\n            renderItem={(item: PokemonNode<PokemonItem>) => (\n              <PokemonListItem node={item.node} key={Number(item.node.id)} />\n            )}></List>\n        )}\n      </>\n    );\n  } else if (typeData) {\n    return (\n      <>\n        {typeData && typeData.pokemonsByType.edges.length === 0 ? (\n          <div className=\"noPokemons\">\n            There are no pokemons matching your preferences! <br />\n            Please try another configuration.\n          </div>\n        ) : (\n          <List\n            loading={!!loadingTypes}\n            dataSource={typeData.pokemonsByType.edges}\n            loadMore=\"ciao\"\n            pagination={{ position: \"top\", pageSize: props.pageQuantity }}\n            renderItem={(item: PokemonNode<PokemonItem>) => (\n              <PokemonListItem node={item.node} key={Number(item.node.id)} />\n            )}></List>\n        )}\n      </>\n    );\n  } else {\n    return (\n      <div className=\"noPokemons\">\n        There are no pokemons matching your preferences! <br />\n        Please try another configuration.\n      </div>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}